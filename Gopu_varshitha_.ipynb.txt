{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Gopu_varshitha .ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "MR3oPsYt-JE_"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mLHmKiip9apr",
        "outputId": "8203cd83-7f01-4031-b30b-384caf49cab0"
      },
      "source": [
        " \n",
        "from keras.datasets import mnist\n",
        " \n",
        "data=mnist.load_data()\n",
        " \n",
        "((x_train,y_train),(x_test,y_test))=data\n",
        " \n",
        "x_train[0].shape\n",
        "x_test[0].shape\n",
        " \n",
        "x_train=x_train.reshape((x_train.shape[0],28*28)).astype('float32')\n",
        "x_test=x_test.reshape((x_test.shape[0],28*28)).astype('float32')\n",
        " \n",
        "x_train=x_train/255\n",
        "x_test=x_test/255\n",
        " \n",
        "from keras.utils import np_utils\n",
        " \n",
        "print(y_test.shape)\n",
        " \n",
        "y_train = np_utils.to_categorical(y_train)\n",
        "y_test = np_utils.to_categorical(y_test)\n",
        " \n",
        "num_classes = y_test.shape\n",
        " \n",
        "print(y_test.shape)\n",
        " \n",
        " \n",
        " \n",
        " \n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        " \n",
        "model = Sequential()\n",
        " \n",
        "model.add(Dense(32, input_dim=28*28,activation='relu'))\n",
        "model.add(Dense(64,activation='relu'))\n",
        " \n",
        "model.add(Dense(10,activation='softmax'))\n",
        " \n",
        "model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n",
        " \n",
        "model.summary()\n",
        " \n",
        "model.fit(x_train,y_train,epochs=20,batch_size=50)\n",
        " \n",
        "scores = model.evaluate(x_test,y_test)\n",
        "print(scores)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11493376/11490434 [==============================] - 0s 0us/step\n",
            "(10000,)\n",
            "(10000, 10)\n",
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense (Dense)                (None, 32)                25120     \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 64)                2112      \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 10)                650       \n",
            "=================================================================\n",
            "Total params: 27,882\n",
            "Trainable params: 27,882\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n",
            "Epoch 1/20\n",
            "1200/1200 [==============================] - 3s 2ms/step - loss: 0.6321 - accuracy: 0.8136\n",
            "Epoch 2/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.1834 - accuracy: 0.9457\n",
            "Epoch 3/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.1411 - accuracy: 0.9581\n",
            "Epoch 4/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.1129 - accuracy: 0.9648\n",
            "Epoch 5/20\n",
            "1200/1200 [==============================] - 3s 2ms/step - loss: 0.0972 - accuracy: 0.9703\n",
            "Epoch 6/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0847 - accuracy: 0.9739\n",
            "Epoch 7/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0775 - accuracy: 0.9765\n",
            "Epoch 8/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0651 - accuracy: 0.9809\n",
            "Epoch 9/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0608 - accuracy: 0.9809\n",
            "Epoch 10/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0535 - accuracy: 0.9837\n",
            "Epoch 11/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0507 - accuracy: 0.9842\n",
            "Epoch 12/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0415 - accuracy: 0.9869\n",
            "Epoch 13/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0410 - accuracy: 0.9871\n",
            "Epoch 14/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0388 - accuracy: 0.9882\n",
            "Epoch 15/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0357 - accuracy: 0.9890\n",
            "Epoch 16/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0323 - accuracy: 0.9900\n",
            "Epoch 17/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0292 - accuracy: 0.9904\n",
            "Epoch 18/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0292 - accuracy: 0.9907\n",
            "Epoch 19/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0250 - accuracy: 0.9922\n",
            "Epoch 20/20\n",
            "1200/1200 [==============================] - 2s 2ms/step - loss: 0.0249 - accuracy: 0.9919\n",
            "313/313 [==============================] - 1s 1ms/step - loss: 0.1238 - accuracy: 0.9698\n",
            "[0.12382679432630539, 0.9697999954223633]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_N_Gge7O-Ks4"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}